{"version":3,"file":"static/js/363.f554fecd.chunk.js","mappings":"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","sources":["components/AuthForms/AuthBtns/AuthBtns.styled.jsx","components/AuthForms/AuthBtns/SignBtn.jsx","components/AuthForms/AuthForms.styled.jsx","components/AuthForms/VerifyForm.jsx","layouts/Modal/Modal.styled.jsx","layouts/Modal/Modal.jsx","components/ProfileCard/ProfileCard.styled.jsx","components/ProfileCard/ProfileCard.jsx","components/ProfileForm/AvatarInput/AvatarInput.styled.jsx","components/ProfileForm/AvatarInput/AvatarInput.jsx","components/ProfileForm/ProfileForm.styled.jsx","components/ProfileForm/ProfileForm.jsx","pages/ProfilePage.jsx","utils/constants/regExp.js","utils/constants/renderFields.js","utils/hooks/useContacts.js","utils/hooks/useAbbreviation.js","utils/validation/userSchema.js","utils/validation/contactSchema.js"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { themes } from 'styles/themes';\n\nconst CommonStyles = css`\n  height: 41px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  cursor: pointer;\n  font-family: 'Roboto', sans-serif;\n  font-size: 14px;\n\n  @media screen and (width >= 768px) {\n    font-size: 16px;\n  }\n\n  border: 1px solid;\n  border-radius: ${themes.radius.s};\n  transition: border-color 250ms, background-color 250ms, color 250ms;\n`;\n\nexport const SignButton = styled.button`\n  ${CommonStyles};\n\n  margin-top: 30px;\n\n  font-weight: 700;\n  border-color: ${themes.colors.accent};\n  color: ${themes.colors.white};\n  background-color: ${themes.colors.accent};\n\n  &:hover,\n  &:focus {\n    border-color: ${themes.colors.hovered};\n    background-color: ${themes.colors.hovered};\n  }\n\n  &:disabled {\n    cursor: auto;\n    color: ${themes.colors.border};\n    border-color: ${themes.colors.accent};\n    background-color: ${themes.colors.accent};\n  }\n`;\n\nexport const IconLink = styled.a`\n  ${CommonStyles};\n\n  margin-top: 18px;\n  padding-inline: 10px;\n\n  font-weight: 400;\n  border-color: ${themes.colors.border};\n  color: ${themes.colors.black};\n  background-color: ${themes.colors.white};\n\n  &:hover,\n  &:focus {\n    color: ${themes.colors.hovered};\n    border-color: ${themes.colors.hovered};\n    background-color: ${themes.colors.ligthBlue};\n  }\n\n  & pre {\n    font-size: 12px;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { SignButton } from './AuthBtns.styled';\n\nconst SignBtn = ({ onClick, disabled, children }) => {\n  return (\n    <SignButton onClick={onClick} type=\"submit\" disabled={disabled}>\n      {children}\n    </SignButton>\n  );\n};\n\nexport default SignBtn;\n\nSignButton.propTepes = {\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.node,\n    PropTypes.oneOf(['img', 'png', 'svg']),\n  ]).isRequired,\n};\n","import styled, { css } from 'styled-components';\nimport { Form as FormikForm } from 'formik';\nimport { Field as FormikField } from 'formik';\nimport { ErrorMessage } from 'formik';\nimport { BsCheckCircle, BsExclamationCircle } from 'react-icons/bs';\n\nimport { themes } from 'styles/themes';\n\nexport const Form = styled(FormikForm)`\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n\n  border-radius: ${themes.radius.m};\n  background-color: ${themes.colors.white};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: baseline;\n\n  font-size: 16px;\n  font-weight: 500;\n\n  & pre {\n    font-size: 10px;\n  }\n  // &::first-letter { text-transform: uppercase; }\n`;\n\nconst FieldStyles = css`\n  margin-bottom: 20px;\n  width: 100%;\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n`;\n\nexport const FieldWrap = styled.div`\n  ${FieldStyles}\n  position: relative;\n`;\n\nexport const Field = styled(FormikField)`\n  ${FieldStyles}\n\n  padding: 10px 12px;\n  padding-left: ${({ name }) => name.toLowerCase().includes('pass') && '38px'};\n\n  font-size: 16px;\n  font-family: 'Roboto', sans-serif;\n\n  border: 1px solid ${themes.colors.border};\n  border-radius: ${themes.radius.s};\n  outline: 0.5px solid transparent;\n  transition: border-color 250ms linear, outline-color 250ms linear;\n\n  border-color: ${({ validation }) => {\n    switch (validation) {\n      case 'noValue':\n        return themes.colors.border;\n      case validation:\n        return themes.colors[validation];\n      default:\n        break;\n    }\n  }};\n\n  &:hover,\n  &:focus {\n    border-color: ${({ validation }) => {\n      switch (validation) {\n        case validation:\n          return themes.colors[validation];\n        default:\n          break;\n      }\n    }};\n\n    outline-color: ${({ validation }) => {\n      switch (validation) {\n        case validation:\n          return themes.colors[validation];\n        default:\n          break;\n      }\n    }};\n  }\n`;\n\nexport const Tittle = styled.div`\n  margin-bottom: 25px;\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n\n  & h2 {\n    margin: 0;\n\n    font-family: 'Montserrat', sans-serif;\n    font-size: 24px;\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  font-size: 14px;\n  font-weight: 400;\n\n  color: ${themes.colors.error};\n`;\n\nconst IconStyles = css`\n  position: absolute;\n  top: 50%;\n  right: 12px;\n  transform: translateY(-50%);\n`;\n\nexport const SuccessIcon = styled(BsCheckCircle)`\n  ${IconStyles};\n\n  color: ${themes.colors.success};\n`;\n\nexport const ErrorIcon = styled(BsExclamationCircle)`\n  ${IconStyles};\n\n  color: ${themes.colors.error};\n`;\n","import PropTypes from 'prop-types';\nimport { Fragment } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport SignBtn from './AuthBtns/SignBtn';\nimport { verifySchema } from 'utils/validation';\nimport { refreshUserThunk, verifyEmailThunk } from 'store/auth/authOperations';\nimport { Form, Field, ErrorMsg, Label } from './AuthForms.styled';\nimport { FieldWrap, Tittle, SuccessIcon, ErrorIcon } from './AuthForms.styled';\n\nconst VerifyForm = ({ userEmail }) => {\n  const dispatch = useDispatch();\n\n  const isValid = ({ values, errors }) => {\n    const noValue = !Object.values(values)[0] && 'noValue';\n    const isError = Object.values(errors).length ? 'error' : 'success';\n    return noValue || isError;\n  };\n\n  const isDisabled = ({ errors }) => Object.keys(errors).length;\n\n  const onSubmit = (values, actions) => {\n    dispatch(verifyEmailThunk(values))\n      .unwrap() // .then(pld =>  console.log(pld))\n      .catch(err => console.log(err))\n      .then(() => dispatch(refreshUserThunk()));\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ verificationCode: '' }}\n      validationSchema={verifySchema}\n      onSubmit={onSubmit}\n    >\n      {({ values, errors }) => (\n        <Form>\n          <Tittle>\n            <h2>Verify: {userEmail}</h2>\n          </Tittle>\n\n          <Fragment>\n            <Label>\n              Code:\n              <pre> </pre>\n              <ErrorMsg name=\"verificationCode\" component=\"span\" />\n            </Label>\n            <FieldWrap>\n              <Field\n                type=\"text\"\n                name=\"verificationCode\"\n                validation={isValid({ values, errors })}\n              />\n\n              {isValid({ values, errors }) === 'error' && <ErrorIcon />}\n              {isValid({ values, errors }) === 'success' && <SuccessIcon />}\n            </FieldWrap>\n          </Fragment>\n\n          <SignBtn disabled={isDisabled({ errors })}>Submit</SignBtn>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default VerifyForm;\n\nVerifyForm.propTypes = { userEmail: PropTypes.string.isRequired };\n","import styled from 'styled-components';\nimport { themes } from 'styles/themes';\n\nexport const Backdrop = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 100;\n\n  background-color: ${themes.colors.backdrop};\n  backdrop-filter: blur(5px);\n\n  & > div {\n    min-width: 400px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n\n    transform: translate(-50%, -50%);\n\n    background-color: transparent; // ${themes.colors.white};\n    box-shadow: ${themes.shadows.modal};\n  }\n`;\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport { Backdrop } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal');\n\nconst Modal = ({ onClick, children }) => {\n  useEffect(() => {\n    const handleKeyDown = e => {\n      e.key === 'Escape' && onClick();\n    };\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClick]);\n\n  const handleBackdropClick = e => e.target === e.currentTarget && onClick();\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClick}>\n      <div>{children}</div>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nexport default Modal;\n\nModal.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n","import styled from 'styled-components';\n\nimport { themes } from 'styles/themes';\n\nexport const Div = styled.div`\n  position: relative;\n\n  & #grid:last-of-type {\n    padding-left: 21%;\n\n    @media screen and (width > 768px) {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: 100%;\n    }\n  }\n`;\n\nexport const Wrapper = styled.div`\n  padding-block: 2px;\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n  grid-column-gap: 20px;\n  text-align: right;\n\n  font-size: 20px;\n  font-weight: 500;\n\n  &:not(:nth-last-of-type(2)) {\n    border-bottom: 1px solid ${themes.colors.border};\n  }\n\n  & span {\n    padding-block: 5px;\n    text-align: start;\n\n    &:nth-of-type(2n + 1) {\n      text-align: end;\n      color: ${themes.colors.placeholder};\n\n      &::first-letter {\n        text-transform: lowercase;\n      }\n    }\n  }\n`;\n\nexport const Avatar = styled.div`\n  position: relative;\n  width: 200px;\n  height: 200px;\n  margin: 12px 0 20px 3vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: 'Averia Sans Libre', sans-serif;\n  font-size: 72px;\n  font-weight: 700;\n\n  border-radius: 50%;\n  background-color: ${themes.colors.white};\n  background-image: ${({ url }) => `url(${url})`};\n  background-size: cover;\n\n  &::after {\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    ${({ abbr }) => `content:\"${abbr}\"`};\n    width: 200px;\n    height: 200px;\n    color: ${themes.colors.placeholder};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport GridWrap from 'components/shared/GridWrap/GridWrap';\nimport Button from 'components/shared/Button/Button';\nimport { useAuth, useAbbreviation } from 'utils/hooks';\nimport { deleteUserThunk } from 'store/auth/authOperations';\nimport { USER_CREDENTIALS } from 'utils/constants';\nimport { Div, Wrapper, Avatar } from './ProfileCard.styled';\n\nconst ProfileCard = ({ setIsProfileForm }) => {\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n  const abbreviation = useAbbreviation(user.name);\n\n  const handleDeleteProfile = () => {\n    const del = window.confirm('Do you want to delete your profile and data?');\n    del && dispatch(deleteUserThunk());\n  };\n\n  return (\n    <Div>\n      <Avatar url={user.avatarUrl} abbr={user.avatarUrl ? '' : abbreviation} />\n\n      {USER_CREDENTIALS.map(\n        el =>\n          user[el] && (\n            <Wrapper key={el}>\n              <span>{el}:</span>\n              <span>{user[el]}</span>\n            </Wrapper>\n          )\n      )}\n\n      <GridWrap mm=\"40px\" cg=\"3vw\" gtc=\"1fr 1fr 1fr\">\n        <Button onClick={() => setIsProfileForm(true)}>Edit</Button>\n        <div></div>\n        <Button onClick={handleDeleteProfile}>Delete</Button>\n      </GridWrap>\n    </Div>\n  );\n};\n\nexport default ProfileCard;\n\nProfileCard.propTypes = { setIsProfileForm: PropTypes.func };\n","import styled, { css } from 'styled-components';\nimport { BsPlus, BsCheck, BsExclamation } from 'react-icons/bs';\n\nimport { themes } from 'styles/themes';\n\n// Avatar messages\nexport const AvatarMsg = styled.span`\n  font-size: 14px;\n  font-family: 'Roboto', sans-serif;\n  color: ${themes.colors.error};\n`;\n\n// Avatar\nexport const Avatar = styled.input`\n  position: relative;\n  width: 200px;\n  height: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: 'Averia Sans Libre', sans-serif;\n  font-size: 72px;\n  font-weight: 700;\n\n  border-radius: 50%;\n  background-color: ${themes.colors.white};\n  background-image: ${({ url }) => `url(${url})`};\n  background-size: cover;\n  background-position: center;\n  cursor: pointer;\n  color: transparent;\n\n  &::after {\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    ${({ abbr }) => `content:\"${abbr}\"`};\n    width: 200px;\n    height: 200px;\n    color: ${themes.colors.placeholder};\n  }\n\n  // &::-webkit-file-upload-button\n  &::file-selector-button {\n    display: none;\n  }\n\n  outline: 1px solid;\n  outline-color: ${({ validation }) => {\n    switch (validation) {\n      case 'noValue':\n        return 'transparent';\n      case validation:\n        return themes.colors[validation];\n      default:\n        break;\n    }\n  }};\n\n  transition: border-color 250ms, outline-color 250ms;\n\n  &:hover,\n  &:focus {\n    outline-color: ${themes.colors.hovered};\n\n    & ~ .plus {\n      border-color: ${themes.colors.hovered};\n      fill: ${themes.colors.hovered};\n    }\n  }\n`;\n\n// Avatar icons\nconst setNoValueColor = (validation, color) =>\n  validation === true || validation === 'noValue'\n    ? themes.colors[color]\n    : 'transparent';\n\nconst setSuccessColor = (validation, color) =>\n  validation === 'success' ? themes.colors[color] : 'transparent';\n\nconst setErrorColor = validation =>\n  validation === 'error' ? themes.colors.error : 'transparent';\n\nconst IconStyles = css`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  bottom: 20px;\n  left: 160px;\n  border: 1px solid ${themes.colors.border};\n  border-radius: 50%;\n  background-color: ${themes.colors.white};\n  cursor: pointer;\n  transition: border-color 250ms, fill 250ms, background-color 250ms;\n`;\n\nexport const PlusIcon = styled(BsPlus)`\n  ${IconStyles};\n\n  background-color: ${({ validation }) => setNoValueColor(validation, 'white')};\n  border-color: ${({ validation }) => setNoValueColor(validation, 'border')};\n  fill: ${({ validation }) => setNoValueColor(validation, 'placeholder')};\n\n  &:hover,\n  &:focus {\n    border-color: ${themes.colors.hovered};\n    fill: ${themes.colors.hovered};\n  }\n`;\n\nexport const CheckedIcon = styled(BsCheck)`\n  ${IconStyles};\n\n  background-color: ${({ validation }) => setSuccessColor(validation, 'white')};\n  border-color: ${({ validation }) => setSuccessColor(validation, 'success')};\n  fill: ${({ validation }) => setSuccessColor(validation, 'success')};\n`;\n\nexport const ExclamationIcon = styled(BsExclamation)`\n  ${IconStyles};\n\n  border-color: ${({ validation }) => setErrorColor(validation)};\n  fill: ${({ validation }) => setErrorColor(validation)};\n`;\n","import { useState, useRef } from 'react';\n\nimport Container from 'components/shared/Container/Container';\nimport { useAuth, useAbbreviation } from 'utils/hooks';\nimport { avatarSchema } from 'utils/validation';\nimport { Avatar, AvatarMsg, PlusIcon } from './AvatarInput.styled';\nimport { CheckedIcon, ExclamationIcon } from './AvatarInput.styled';\n\nconst AvatarInput = ({ setFieldValue }) => {\n  const inputRef = useRef(null);\n  const { user } = useAuth();\n  const [avatarUrl, setAvatarUrl] = useState(user.avatarUrl);\n  const [avatarError, setAvatarError] = useState('');\n  const [mouseOver, setMouseOver] = useState(false);\n  const abbreviation = useAbbreviation(user.name);\n\n  const handleSetAvatarClick = () => inputRef.current.click();\n\n  const setAvatar = async (e, setFieldValue) => {\n    const avatar = e.target.files[0];\n    try {\n      await avatarSchema.validate({ avatar });\n      const imageUrl = URL.createObjectURL(avatar);\n      setAvatarError('');\n      setAvatarUrl(imageUrl);\n      setFieldValue('avatar', avatar);\n    } catch (error) {\n      if (!error.message.includes('URL')) {\n        setAvatarError(error.message);\n      }\n      setAvatarUrl('');\n    }\n    e.target.blur();\n  };\n\n  const isValid = bool => {\n    const noValue = !(avatarUrl.includes('blob') || avatarError) && 'noValue';\n    const isError = avatarError ? 'error' : 'success';\n    return bool || noValue || isError;\n  };\n\n  const onMouseOver = e => {\n    setMouseOver(true);\n    e.relatedTarget.focus();\n  };\n\n  const onMouseOut = e => {\n    setMouseOver(false);\n    e.relatedTarget.blur();\n  };\n\n  return (\n    <Container m=\"12px 0 20px 3vw\" p=\"0\" d=\"flex\" ai=\"end\">\n      <Avatar\n        type=\"file\"\n        name=\"avatar\"\n        accept=\"image/*\"\n        ref={inputRef}\n        validation={isValid().toString()}\n        url={avatarUrl}\n        abbr={avatarUrl ? '' : abbreviation}\n        onChange={e => setAvatar(e, setFieldValue)}\n        onMouseOver={() => setMouseOver(true)}\n        onMouseOut={() => setMouseOver(false)}\n      />\n\n      <ExclamationIcon validation={isValid(mouseOver).toString()} />\n      <CheckedIcon validation={isValid(mouseOver).toString()} />\n\n      <PlusIcon\n        className=\"plus\"\n        validation={isValid(mouseOver).toString()}\n        onClick={handleSetAvatarClick}\n        onMouseOver={onMouseOver}\n        onMouseOut={onMouseOut}\n      />\n\n      {avatarError && <AvatarMsg>{avatarError}</AvatarMsg>}\n    </Container>\n  );\n};\n\nexport default AvatarInput;\n","import styled from 'styled-components';\nimport { Form as FormikForm } from 'formik';\nimport { Field as FormikField } from 'formik';\nimport { ErrorMessage } from 'formik';\n\nimport { themes } from 'styles/themes';\n\nexport const Form = styled(FormikForm)`\n  position: relative;\n\n  & .wrapper:not(:nth-last-of-type(2)) {\n    border-bottom: 1px solid ${themes.colors.border};\n  }\n\n  & #grid:last-of-type {\n    padding-left: 21%;\n\n    @media screen and (width > 768px) {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: 100%;\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  padding-block: 2px;\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n  grid-column-gap: 20px;\n  text-align: right;\n  align-items: center;\n\n  color: ${themes.colors.placeholder};\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const Field = styled(FormikField)`\n  text-align: left;\n  background-color: transparent;\n  padding: 5px 0;\n\n  border: 1px solid transparent;\n  outline: transparent;\n  transition: border-color 250ms;\n\n  font-family: 'Roboto', sans-serif;\n  font-size: 20px;\n  font-weight: 500;\n  color: ${themes.colors.black};\n\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus {\n    -webkit-box-shadow: 0 0 0px 1000px transparent inset;\n  }\n\n  &:hover,\n  &:focus {\n    border-color: ${themes.colors.hovered};\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  margin-left: 22%;\n  padding-bottom: 5px;\n  font-size: 12px;\n  font-family: 'Roboto', sans-serif;\n  color: ${themes.colors.error};\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\n\nimport AvatarInput from 'components/ProfileForm/AvatarInput/AvatarInput';\nimport GridWrap from 'components/shared/GridWrap/GridWrap';\nimport Button from 'components/shared/Button/Button';\nimport { useAuth } from 'utils/hooks';\nimport { updateUserThunk } from 'store/auth/authOperations';\nimport { USER_CREDENTIALS } from 'utils/constants';\nimport { profileSchema } from 'utils/validation';\nimport { Form, Field, Label, ErrorMsg } from './ProfileForm.styled';\n\nconst initialValues = { avatar: '' };\n\nconst ProfileForm = ({ setIsProfileForm }) => {\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n\n  USER_CREDENTIALS.forEach(key => (initialValues[key] = user[key]));\n\n  const onSubmit = values => {\n    const formData = new FormData();\n    Object.keys(values).forEach(key => {\n      const data = key === 'avatar' ? values[key] : values[key].trim();\n      values[key] !== initialValues[key] && formData.append(key, data);\n    });\n    const isEmpty = formData.entries().next().done;\n    !isEmpty && dispatch(updateUserThunk(formData));\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={profileSchema}\n      onSubmit={onSubmit}\n    >\n      {({ setFieldValue }) => (\n        <Form>\n          <AvatarInput setFieldValue={setFieldValue} />\n\n          {USER_CREDENTIALS.map(key => (\n            <div className=\"wrapper\" key={key}>\n              <Label>\n                {key}:\n                <Field type=\"text\" name={key} />\n              </Label>\n              <ErrorMsg name={key} component=\"div\" />\n            </div>\n          ))}\n          <GridWrap mm=\"40px\" cg=\"3vw\" gtc=\"1fr 1fr 1fr\">\n            <Button type=\"submit\">Submit</Button>\n            <Button onClick={() => setIsProfileForm(false)}>Cancel</Button>\n          </GridWrap>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ProfileForm;\n\nProfileForm.propTypes = { setIsProfileForm: PropTypes.func };\n","import { useState } from 'react';\n\nimport GridWrap from 'components/shared/GridWrap/GridWrap';\nimport ProfileCard from 'components/ProfileCard/ProfileCard';\nimport ProfileForm from 'components/ProfileForm/ProfileForm';\nimport Modal from 'layouts/Modal/Modal';\nimport VerifyForm from 'components/AuthForms/VerifyForm';\nimport { useAuth } from 'utils/hooks';\n\nconst ProfilePage = () => {\n  const { user, isLoading } = useAuth();\n  const [isProfileForm, setIsProfileForm] = useState(false);\n  const [isVerify, setIsVerify] = useState(user.verificationCode);\n\n  const gridHeight = window.innerHeight > 600 ? 'calc(100vh - 90px)' : '510px';\n\n  return (\n    <GridWrap h={gridHeight} gtc=\"2fr 3fr\">\n      <h1>Profile</h1>\n\n      {isProfileForm && !isLoading && (\n        <ProfileForm\n          setIsProfileForm={setIsProfileForm}\n          setIsVerify={setIsVerify}\n        />\n      )}\n      {!isProfileForm && !isLoading && (\n        <ProfileCard setIsProfileForm={setIsProfileForm} />\n      )}\n\n      {isVerify && (\n        <Modal onClick={() => setIsVerify(!isVerify)}>\n          <VerifyForm userEmail={isVerify} />\n        </Modal>\n      )}\n    </GridWrap>\n  );\n};\n\nexport default ProfilePage;\n","const NAME = {\n  name: 'NAME',\n  msg: 'only letters, numbers, underscores, dashes, spases',\n  pattern: /^[a-zA-Zа-яА-Я0-9]+(([_ -][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nconst EMAIL = {\n  name: 'EMAIL',\n  msg: 'test@test.com, test@test.ua',\n  pattern: /^\\w+([\\\\.-]?\\w+)*@\\w+([\\\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n};\n\nconst PHONE = {\n  name: 'PHONE',\n  msg: 'only digits, spaces, dashes, parentheses, can start with +',\n  pattern: /^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$/,\n};\n\nconst TELEGRAM = {\n  name: 'TELEGRAM',\n  msg: 'only letters and numbers,  more than five, start with @',\n  pattern: /.*\\B@(?=\\w{5,32}\\b)[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*$/,\n};\n\nconst TELEGRAM_PHONE = {\n  name: 'TELEGRAM_PHONE',\n  msg: 'only letters, digits, spaces, dashes, parentheses, can start with +, @',\n  pattern:\n    /(.*\\B@(?=\\w{5,32}\\b)[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*$)|(^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$)/,\n};\n\nconst HTTP_LINK = {\n  name: 'HTTP_LINK',\n  msg: 'http(s)://.../...',\n  pattern:\n    /^(http(s)?:\\/\\/)?(([_.-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)+\\/(([_-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nconst LINKEDIN = {\n  name: 'LINKEDIN',\n  msg: 'http(s)://linkedin.com/...',\n  pattern:\n    /^(http(s)?:\\/\\/)?([\\w]+\\.)?linkedin\\.com\\/(pub|in|profile)+\\/(([_-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nconst GITHUB = {\n  name: 'GITHUB',\n  msg: 'http(s)://www.github.com/...',\n  pattern:\n    /^(http(s?):\\/\\/)?(www\\.)?github\\.com+\\/(([_-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nconst DATE = {\n  name: 'DATE',\n  msg: 'dd.mm.yyyy',\n  pattern:\n    /^([0-2^([0-2][0-9]|(3)[0-1])(\\.)(((0)[0-9])|((1)[0-2]))(\\.)((19|20)\\d{2}$)/,\n};\n\nconst ADDRESS = {\n  name: 'ADDRESS',\n  msg: 'only letters, numbers, commas, dashes, spases',\n  pattern:\n    /^[a-zA-Zа-яА-Я0-9]+(([ -]|(, )[a-zA-Zа-яА-Я0-9])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nexport {\n  NAME,\n  EMAIL,\n  PHONE,\n  TELEGRAM,\n  TELEGRAM_PHONE,\n  HTTP_LINK,\n  LINKEDIN,\n  GITHUB,\n  DATE,\n  ADDRESS,\n};\n","export const CONTACT_CREDENTIALS = [\n  'phone',\n  'email',\n  'whatsapp',\n  'viber',\n  'telegram',\n  'linkedin',\n  'github',\n  'address',\n  'birthday',\n  'notes',\n];\n\nexport const CONTACT_FIELDS = ['firstName', 'lastName', ...CONTACT_CREDENTIALS];\n\nexport const USER_CREDENTIALS = [\n  'name',\n  'email',\n  'whatsApp',\n  'telegram',\n  'location',\n  'socialLink',\n  'birthday',\n  'about',\n];\n","import { useSelector } from 'react-redux';\nimport * as selectors from 'store/seletors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectors.selectContacts);\n  const activeContact = useSelector(selectors.selectActiveContact);\n  const filterValue = useSelector(selectors.selectFilterValue);\n\n  const error = useSelector(selectors.selectError);\n  const isLoading = useSelector(selectors.selectIsLoading);\n\n  return { contacts, activeContact, filterValue, error, isLoading };\n};\n","export const useAbbreviation = text => {\n  const abbreviation = text\n    .replace('-', ' ')\n    .split(/\\s+/)\n    .reduce((acc, el) => acc + el.at(0).toUpperCase(), '')\n    .substring(0, 3);\n\n  return abbreviation;\n};\n","import * as Yup from 'yup';\n\nimport { regExp } from 'utils/constants';\n\nconst pattern = regExp => [regExp.pattern, regExp.msg];\n\n// Name, Email, Password\nconst name = Yup.string()\n  .min(4, 'is too short')\n  .required('is required')\n  .matches(...pattern(regExp.NAME));\nconst email = Yup.string()\n  .required('is required')\n  .matches(...pattern(regExp.EMAIL));\nconst password = Yup.string().min(6, 'is too short').required('is required');\nconst code = Yup.number().required('is required').typeError('must be a number');\n\n// Avatar\nconst MAX_SIZE = 1024 * 1024;\nconst MB = 1024 * 1024; // const kB = 1024;\n\nconst avatar = Yup.mixed()\n  .test('size', ` max file size: ${MAX_SIZE / MB}MB`, file =>\n    !file ? true : file.size <= MAX_SIZE\n  )\n  .test('type', 'invalid file type', file =>\n    !file ? true : file.type.includes('image')\n  );\n\nexport const signupSchema = Yup.object().shape({ name, email, password });\nexport const signinSchema = Yup.object().shape({ email, password });\nexport const verifySchema = Yup.object().shape({ verificationCode: code });\nexport const forgotSchema = Yup.object().shape({ email });\nexport const resetSchema = Yup.object().shape({\n  newPass: password,\n  confirmPass: password.oneOf([Yup.ref('newPass')], 'must match'),\n});\n\nexport const profileSchema = Yup.object().shape({\n  name,\n  email,\n  whatsApp: Yup.string().matches(...pattern(regExp.PHONE)),\n  telegram: Yup.string().matches(...pattern(regExp.TELEGRAM)),\n  location: Yup.string().matches(...pattern(regExp.ADDRESS)),\n  socialLink: Yup.string().matches(...pattern(regExp.HTTP_LINK)),\n  birthday: Yup.string().matches(...pattern(regExp.DATE)),\n  about: Yup.string(),\n});\n\nexport const avatarSchema = Yup.object().shape({ avatar });\n","import * as Yup from 'yup';\n\nimport { regExp } from 'utils/constants';\n\nconst pattern = regExp => [regExp.pattern, regExp.msg];\n\nexport const contactSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .required('Required')\n    .matches(...pattern(regExp.NAME)),\n  lastName: Yup.string().matches(...pattern(regExp.NAME)),\n  phone: Yup.string()\n    .required('Required')\n    .matches(...pattern(regExp.PHONE)),\n  email: Yup.string().matches(...pattern(regExp.EMAIL)),\n  whatsapp: Yup.string().matches(...pattern(regExp.PHONE)),\n  viber: Yup.string().matches(...pattern(regExp.PHONE)),\n  telegram: Yup.string().matches(...pattern(regExp.TELEGRAM)),\n  linkedin: Yup.string().matches(...pattern(regExp.LINKEDIN)),\n  github: Yup.string().matches(...pattern(regExp.GITHUB)),\n  address: Yup.string().matches(...pattern(regExp.ADDRESS)),\n  birthday: Yup.string().matches(...pattern(regExp.DATE)),\n  notes: Yup.string(),\n});\n"],"names":["CommonStyles","css","themes","SignButton","styled","IconLink","onClick","disabled","children","type","PropTypes","isRequired","Form","FormikForm","Label","FieldStyles","FieldWrap","Field","FormikField","name","toLowerCase","includes","validation","Tittle","ErrorMsg","ErrorMessage","IconStyles","SuccessIcon","BsCheckCircle","ErrorIcon","BsExclamationCircle","userEmail","dispatch","useDispatch","isValid","values","errors","noValue","Object","isError","length","isDisabled","keys","initialValues","verificationCode","validationSchema","verifySchema","onSubmit","actions","verifyEmailThunk","unwrap","catch","err","console","log","then","refreshUserThunk","resetForm","Fragment","component","Backdrop","modalRoot","document","querySelector","useEffect","handleKeyDown","e","key","window","addEventListener","removeEventListener","createPortal","target","currentTarget","Div","Wrapper","Avatar","url","abbr","setIsProfileForm","user","useAuth","abbreviation","useAbbreviation","avatarUrl","USER_CREDENTIALS","el","GridWrap","mm","cg","gtc","Button","confirm","deleteUserThunk","AvatarMsg","setNoValueColor","color","setSuccessColor","setErrorColor","PlusIcon","BsPlus","CheckedIcon","BsCheck","ExclamationIcon","BsExclamation","setFieldValue","inputRef","useRef","useState","setAvatarUrl","avatarError","setAvatarError","mouseOver","setMouseOver","setAvatar","avatar","files","avatarSchema","imageUrl","URL","createObjectURL","message","blur","bool","Container","m","p","d","ai","accept","ref","toString","onChange","onMouseOver","onMouseOut","className","current","click","relatedTarget","focus","profileSchema","formData","FormData","forEach","data","trim","append","entries","next","done","updateUserThunk","isLoading","isProfileForm","isVerify","setIsVerify","gridHeight","innerHeight","h","Modal","VerifyForm","NAME","msg","pattern","EMAIL","PHONE","TELEGRAM","HTTP_LINK","LINKEDIN","GITHUB","DATE","ADDRESS","CONTACT_CREDENTIALS","CONTACT_FIELDS","useContacts","contacts","useSelector","selectors","activeContact","filterValue","error","text","replace","split","reduce","acc","at","toUpperCase","substring","regExp","Yup","min","required","matches","email","password","code","typeError","MAX_SIZE","test","file","size","signupSchema","shape","signinSchema","forgotSchema","resetSchema","newPass","confirmPass","oneOf","whatsApp","telegram","location","socialLink","birthday","about","contactSchema","firstName","lastName","phone","whatsapp","viber","linkedin","github","address","notes"],"sourceRoot":""}