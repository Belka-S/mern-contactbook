{"version":3,"file":"static/js/530.7fbe7e0d.chunk.js","mappings":"wSAcMA,EAAgB,CAAEC,KAAM,GAAIC,MAAO,GAAIC,SAAU,IAyEvD,EAvEmB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACdC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,UAAS,YAArC,eAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAU,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,IAC3BC,GAAWH,EAAOE,IAAQ,UAC1BE,EAAUH,EAAOC,GAAO,QAAU,UACxC,OAAOC,GAAWC,CACnB,EAEKC,EAAa,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,OAAQD,EAAa,EAAbA,OACtBI,EAAUE,OAAOC,KAAKN,GAAQO,OAEpC,OADgBF,OAAOC,KAAKP,GAAQS,MAAK,SAAAP,GAAG,OAAKF,EAAOE,EAAZ,KAC1BE,CACnB,EAWD,OACE,SAAC,KAAD,CACEf,cAAeA,EACfqB,iBAAkBC,EAAAA,GAClBC,SAba,SAACZ,EAAQa,GACxBnB,GAASoB,EAAAA,EAAAA,IAAcd,IACpBe,SACAC,MAAK,SAAAC,GAAG,OAAIxB,GAAawB,EAAIC,OAAOC,KAAKC,cAAjC,IACRC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,IAEZT,EAAQY,WACT,EAGC,SAKG,gBAAGzB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAX,OACC,UAAC,KAAD,YACE,UAAC,KAAD,YACE,qCACA,SAACyB,EAAA,EAAD,CAAWC,GAAG,UAAd,iCAGDrB,OAAOC,KAAKlB,GAAeuC,KAAI,SAAA1B,GAAG,OACjC,UAAC,EAAA2B,SAAD,YACE,UAAC,KAAD,WACG3B,EAAI4B,GAAG,GAAGC,cAAgB7B,EAAI8B,UAAU,GAAK,KAC9C,gCACA,SAAC,KAAD,CAAU1C,KAAMY,EAAK+B,UAAU,aAGjC,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,KAAc,aAARhC,EAAqBL,EAASK,EACpCZ,KAAMY,EACNiC,WAAYpC,EAAQ,CAAEC,OAAAA,EAAQC,OAAAA,EAAQC,IAAAA,MAG/B,aAARA,IACC,SAACkC,EAAA,EAAD,CAASvC,OAAQA,EAAQC,UAAWA,IAErCE,EAAOE,IAAQD,EAAOC,KAAQ,SAAC,KAAD,IAC9BF,EAAOE,KAASD,EAAOC,KAAQ,SAAC,KAAD,SAlBrBA,EADkB,KAwBnC,SAACmC,EAAA,EAAD,CAASC,SAAUjC,EAAW,CAAEL,OAAAA,EAAQC,OAAAA,IAAxC,sBAEA,SAACsC,EAAA,EAAD,MAjCH,GAsCN,E,6BC5DD,EAjBmB,WACjB,OAAgC3C,EAAAA,EAAAA,WAAS,GAAzC,eAAO4C,EAAP,KAAiB/C,EAAjB,KACQ0B,GAASsB,EAAAA,EAAAA,MAATtB,KAER,OACE,UAACuB,EAAA,EAAD,CAAWC,EAAE,QAAQC,EAAE,QAAQC,EAAE,IAAIC,EAAE,OAAOC,GAAG,SAASC,GAAG,SAA7D,WACE,SAAC,EAAD,CAAYvD,YAAaA,IAExB+C,IACC,SAACS,EAAA,EAAD,CAAOC,QAAS,kBAAMzD,GAAa+C,EAAnB,EAAhB,UACE,SAACW,EAAA,EAAD,CAAYC,UAAWjC,EAAK5B,YAKrC,C","sources":["components/AuthForms/SignupForm.jsx","pages/SignupPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Fragment, useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport LinkRoute from 'components/AuthForms/AuthLinks/LinkRoute';\nimport SignBtn from './AuthBtns/SignBtn';\nimport IconBtn from './IconBtn/IconBtn';\nimport GoogleBtn from './AuthBtns/GoogleBtn';\nimport { registerThunk } from 'store/auth/authOperations';\nimport { signupSchema } from 'utils/validation';\nimport { Form, Field, ErrorMsg, Label } from './AuthForms.styled';\nimport { FieldWrap, Tittle, SuccessIcon, ErrorIcon } from './AuthForms.styled';\n\nconst initialValues = { name: '', email: '', password: '' };\n\nconst SignupForm = ({ setIsVerify }) => {\n  const dispatch = useDispatch();\n  const [toggle, setToggle] = useState('password');\n\n  const isValid = ({ values, errors, key }) => {\n    const noValue = !values[key] && 'noValue';\n    const isError = errors[key] ? 'error' : 'success';\n    return noValue || isError;\n  };\n\n  const isDisabled = ({ errors, values }) => {\n    const isError = Object.keys(errors).length;\n    const noValue = Object.keys(values).some(key => !values[key]);\n    return noValue || isError;\n  };\n\n  const onSubmit = (values, actions) => {\n    dispatch(registerThunk(values))\n      .unwrap()\n      .then(pld => setIsVerify(!pld.result.user.verifiedEmail))\n      .catch(err => console.log(err));\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={signupSchema}\n      onSubmit={onSubmit}\n    >\n      {({ values, errors }) => (\n        <Form>\n          <Tittle>\n            <h2>Sign up</h2>\n            <LinkRoute to=\"/signin\">Have an account?</LinkRoute>\n          </Tittle>\n\n          {Object.keys(initialValues).map(key => (\n            <Fragment key={key}>\n              <Label>\n                {key.at(0).toUpperCase() + key.substring(1) + ':'}\n                <pre> </pre>\n                <ErrorMsg name={key} component=\"span\" />\n              </Label>\n\n              <FieldWrap>\n                <Field\n                  type={key === 'password' ? toggle : key}\n                  name={key}\n                  validation={isValid({ values, errors, key })}\n                />\n\n                {key === 'password' && (\n                  <IconBtn toggle={toggle} setToggle={setToggle} />\n                )}\n                {values[key] && errors[key] && <ErrorIcon />}\n                {values[key] && !errors[key] && <SuccessIcon />}\n              </FieldWrap>\n            </Fragment>\n          ))}\n\n          <SignBtn disabled={isDisabled({ values, errors })}>Sign up</SignBtn>\n\n          <GoogleBtn />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default SignupForm;\n\nSignupForm.propTypes = {\n  setIsVerify: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\n\nimport Container from 'components/shared/Container/Container';\nimport SignupForm from 'components/AuthForms/SignupForm';\nimport Modal from 'layouts/Modal/Modal';\nimport VerifyForm from 'components/AuthForms/VerifyForm';\nimport { useAuth } from 'utils/hooks';\n\nconst SignupPage = () => {\n  const [isVerify, setIsVerify] = useState(false);\n  const { user } = useAuth();\n\n  return (\n    <Container w=\"400px\" h=\"100vh\" p=\"0\" d=\"flex\" fd=\"column\" jc=\"center\">\n      <SignupForm setIsVerify={setIsVerify} />\n\n      {isVerify && (\n        <Modal onClick={() => setIsVerify(!isVerify)}>\n          <VerifyForm userEmail={user.email} />\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default SignupPage;\n"],"names":["initialValues","name","email","password","setIsVerify","dispatch","useDispatch","useState","toggle","setToggle","isValid","values","errors","key","noValue","isError","isDisabled","Object","keys","length","some","validationSchema","signupSchema","onSubmit","actions","registerThunk","unwrap","then","pld","result","user","verifiedEmail","catch","err","console","log","resetForm","LinkRoute","to","map","Fragment","at","toUpperCase","substring","component","type","validation","IconBtn","SignBtn","disabled","GoogleBtn","isVerify","useAuth","Container","w","h","p","d","fd","jc","Modal","onClick","VerifyForm","userEmail"],"sourceRoot":""}