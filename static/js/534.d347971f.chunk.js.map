{"version":3,"file":"static/js/534.d347971f.chunk.js","mappings":"yOAEaA,EAAMC,EAAAA,GAAAA,IAAH,0C,UCAHC,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,OAAO,SAACH,EAAD,UAAMG,GACd,E,UCFYC,EAAOH,EAAAA,GAAAA,GAAH,gyB,oBCMJI,EAAc,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBACtBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,KAEhCC,EAAAA,EAAAA,YAAU,WACRP,GAASQ,EAAAA,EAAAA,MACV,GAAE,CAACR,IAEJ,IAAMS,EAAkBP,EAASQ,QAAO,SAAAC,GACtC,OAAOA,EAAGC,KAAKC,cAAcC,SAAST,EAAYQ,cACnD,IAEKE,EAAc,SAAAC,GAClB,IAAMC,EAAWD,EAAEE,OAAOC,QAAQ,MAAMC,cAAc,WAC9C,OAARH,QAAQ,IAARA,GAAAA,EAAUI,UAAUC,OAAO,UAC3BN,EAAEE,OAAOG,UAAUE,IAAI,UACvBxB,EAAmBiB,EAAEE,OAAOM,QAAQC,GACrC,EAED,OACE,SAAC5B,EAAD,UACGY,EAAgBiB,KAAI,SAAAC,GAAO,OAC1B,gBAAsB,UAASA,EAAQC,IAAKC,QAASd,EAArD,UACGY,EAAQf,MACT,mBAAQiB,QAAS,kBAAM7B,GAAS8B,EAAAA,EAAAA,IAAmBH,EAAQC,KAA1C,EAAjB,sBAFOD,EAAQC,IADS,KAUjC,E,UCtCKG,EAAa,OACbC,EAAW,OAEJvC,EAAMC,EAAAA,GAAAA,IAAH,41BAOFqC,EACQA,EAWHC,EAKWD,EAMCC,EAQZD,GAKNE,EAASvC,EAAAA,GAAAA,OAAH,2SAGHqC,EAUDC,G,UCtDFE,EAAS,WACpB,IAAM7B,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1BN,GAAWC,EAAAA,EAAAA,MAGXkC,EAAe,SAAAnB,GAAC,OAAIhB,GAASoC,EAAAA,EAAAA,GAAepB,EAAEE,OAAOmB,OAArC,EAEtB,OACE,UAAC,EAAD,YACE,kBACEC,KAAK,OACL1B,KAAK,SACL2B,YAAY,SACZF,MAAOhC,EACPmC,SAAUL,KAEZ,SAAC,MAAD,CAAUM,KAAK,KAAKZ,QAZJ,SAAAb,GAAC,OAAIA,EAAEE,OAAOwB,uBAAuBC,OAApC,IAahBtC,IAAe,SAAC4B,EAAD,CAAQJ,QAASM,EAAjB,sBAGrB,ECMD,EAvBiB,WACf,OAA8CS,EAAAA,EAAAA,UAAS,IAAvD,eAAOC,EAAP,KAAwB9C,EAAxB,KACM+C,GAAY3C,EAAAA,EAAAA,IAAY4C,EAAAA,IAGxBC,GAFW7C,EAAAA,EAAAA,IAAYC,EAAAA,IAEE6C,MAC7B,SAAAtB,GAAO,OAAIA,EAAQC,MAAQiB,CAApB,IAGT,OACE,UAAClD,EAAD,YACE,UAACuD,EAAA,EAAD,CAAWC,GAAG,IAAd,WACE,SAACjB,EAAD,IADF,KACa,mBACX,SAACpC,EAAD,CAAaC,mBAAoBA,QAGnC,SAACmD,EAAA,EAAD,CAAWE,GAAE,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAepC,KAAMyC,GAAE,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAeM,QAEtDR,IAAa,SAACS,EAAA,EAAD,MAGnB,C","sources":["components/common/FlexWrapper/FlexWrapper.styled.jsx","components/common/FlexWrapper/FlexWrapper.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Div = styled.div`\n  display: flex;\n`;\n","import { Div } from './FlexWrapper.styled';\n\nexport const FlexWrapper = ({ children }) => {\n  return <Div>{children}</Div>;\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 100%;\n  padding: 20px 0;\n  display: inline-flex;\n  flex-direction: column;\n\n  font-weight: 500;\n  counter-reset: section;\n\n  /* counter-reset: section; */\n  /* list-style-type: none; */\n\n  li {\n    margin-bottom: 10px;\n    display: inline-flex;\n    padding: 3px 10px 1px;\n    border-radius: 5px;\n\n    gap: 5px;\n    cursor: pointer;\n\n    &::before {\n      counter-increment: section;\n      content: counters(section, '.') '.';\n    }\n\n    button {\n      margin-left: auto;\n      padding: 0 20px;\n      background-color: transparent;\n      border-color: transparent;\n      font-weight: 700;\n\n      &:hover,\n      &:focus {\n        color: tomato;\n      }\n    }\n  }\n  & .active {\n    background-color: teal;\n    color: white;\n  }\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { List } from './ContactList.styled';\nimport { selectContacts, selectFilterValue } from 'store/seletors';\nimport { fetchContactsThunk } from 'store/contacts/contactsOperations';\nimport { deleteContactThunk } from 'store/contacts/contactsOperations';\n\nexport const ContactList = ({ setActiveContactId }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectFilterValue);\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  const filtredContacts = contacts.filter(el => {\n    return el.name.toLowerCase().includes(filterValue.toLowerCase());\n  });\n\n  const handleClick = e => {\n    const activeEl = e.target.closest('ul').querySelector('.active');\n    activeEl?.classList.remove('active');\n    e.target.classList.add('active');\n    setActiveContactId(e.target.dataset.id);\n  };\n\n  return (\n    <List>\n      {filtredContacts.map(contact => (\n        <li key={contact._id} data-id={contact._id} onClick={handleClick}>\n          {contact.name}\n          <button onClick={() => dispatch(deleteContactThunk(contact._id))}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nconst heightSize = '30px';\nconst fontSize = '14px';\n\nexport const Div = styled.div`\n  width: 100%;\n  position: relative;\n  display: inline-block;\n\n  input {\n    width: 100%;\n    height: ${heightSize};\n    padding-inline: ${heightSize};\n    border: 1px solid gray;\n    border-radius: 5px;\n    outline: transparent;\n\n    &::placeholder {\n      width: fit-content;\n      position: absolute;\n      left: 50%;\n      transform: translateX(-50%);\n      transition: left 300ms, transform 300ms;\n      font-size: ${fontSize};\n    }\n\n    &:focus::placeholder {\n      left: 0;\n      transform: translateX(${heightSize});\n    }\n\n    & + svg {\n      position: absolute;\n      top: 50%;\n      left: calc(50% - 2.5 * ${fontSize});\n      transform: translate(-50%, -50%);\n      transition: left 300ms, transform 300ms;\n      cursor: text;\n    }\n\n    &:focus + svg,\n    &:not(:placeholder-shown) + svg {\n      left: calc(${heightSize} * 0.55);\n    }\n  }\n`;\n\nexport const Button = styled.button`\n  position: absolute;\n  top: 50%;\n  right: calc(${heightSize} * 0.55);\n  width: 20px;\n  height: 20px;\n\n  transform: translate(50%, -50%);\n  border: 1px solid transparent;\n  border-radius: 50%;\n  background-color: gray;\n  color: white;\n  font-weight: 700;\n  font-size: ${fontSize};\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { BsSearch } from 'react-icons/bs';\n\nimport { Div, Button } from './Filter.styled';\nimport { selectFilterValue } from 'store/seletors';\nimport { setFilterValue } from 'store/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filterValue = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n\n  const handleClick = e => e.target.previousElementSibling.focus();\n  const handleSearch = e => dispatch(setFilterValue(e.target.value));\n\n  return (\n    <Div>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search\"\n        value={filterValue}\n        onChange={handleSearch}\n      />\n      <BsSearch size=\"16\" onClick={handleClick} />\n      {filterValue && <Button onClick={handleSearch}>âœ•</Button>}\n    </Div>\n  );\n};\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { OvalLoader } from 'components/common/Loader/OvalLoader';\n\nimport { FlexWrapper } from 'components/common/FlexWrapper/FlexWrapper';\nimport { Container } from 'components/common/Container/Container';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectIsLoading, selectContacts } from 'store/seletors';\n\nconst Contacts = () => {\n  const [activeContactId, setActiveContactId] = useState('');\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  const activeContact = contacts.find(\n    contact => contact._id === activeContactId\n  );\n\n  return (\n    <FlexWrapper>\n      <Container pi=\"0\">\n        <Filter /> <br />\n        <ContactList setActiveContactId={setActiveContactId} />\n      </Container>\n\n      <Container t2={activeContact?.name} t3={activeContact?.phone}></Container>\n\n      {isLoading && <OvalLoader />}\n    </FlexWrapper>\n  );\n};\n\nexport default Contacts;\n"],"names":["Div","styled","FlexWrapper","children","List","ContactList","setActiveContactId","dispatch","useDispatch","contacts","useSelector","selectContacts","filterValue","selectFilterValue","useEffect","fetchContactsThunk","filtredContacts","filter","el","name","toLowerCase","includes","handleClick","e","activeEl","target","closest","querySelector","classList","remove","add","dataset","id","map","contact","_id","onClick","deleteContactThunk","heightSize","fontSize","Button","Filter","handleSearch","setFilterValue","value","type","placeholder","onChange","size","previousElementSibling","focus","useState","activeContactId","isLoading","selectIsLoading","activeContact","find","Container","pi","t2","t3","phone","OvalLoader"],"sourceRoot":""}