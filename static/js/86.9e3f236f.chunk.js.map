{"version":3,"file":"static/js/86.9e3f236f.chunk.js","mappings":"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","sources":["components/AuthForms/AuthBtns/AuthBtns.styled.jsx","components/AuthForms/AuthBtns/SignBtn.jsx","components/AuthForms/AuthForms.styled.jsx","components/AuthForms/IconBtn/IconBtn.styled.jsx","components/AuthForms/IconBtn/IconBtn.jsx","components/AuthForms/ResetForm.jsx","pages/ResetPage.jsx","utils/constants/regExp.js","utils/constants/renderFields.js","utils/validation/userSchema.js","utils/validation/contactSchema.js"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { themes } from 'styles/themes';\n\nconst CommonStyles = css`\n  height: 41px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  cursor: pointer;\n  font-family: 'Roboto', sans-serif;\n  font-size: 14px;\n\n  @media screen and (width >= 768px) {\n    font-size: 16px;\n  }\n\n  border: 1px solid;\n  border-radius: ${themes.radius.s};\n  transition: border-color 250ms, background-color 250ms, color 250ms;\n`;\n\nexport const SignButton = styled.button`\n  ${CommonStyles};\n\n  margin-top: 30px;\n\n  font-weight: 700;\n  border-color: ${themes.colors.accent};\n  color: ${themes.colors.white};\n  background-color: ${themes.colors.accent};\n\n  &:hover,\n  &:focus {\n    border-color: ${themes.colors.hovered};\n    background-color: ${themes.colors.hovered};\n  }\n\n  &:disabled {\n    cursor: auto;\n    color: ${themes.colors.border};\n    border-color: ${themes.colors.accent};\n    background-color: ${themes.colors.accent};\n  }\n`;\n\nexport const IconLink = styled.a`\n  ${CommonStyles};\n\n  margin-top: 18px;\n  padding-inline: 10px;\n\n  font-weight: 400;\n  border-color: ${themes.colors.border};\n  color: ${themes.colors.black};\n  background-color: ${themes.colors.white};\n\n  &:hover,\n  &:focus {\n    color: ${themes.colors.hovered};\n    border-color: ${themes.colors.hovered};\n    background-color: ${themes.colors.ligthBlue};\n  }\n\n  & pre {\n    font-size: 12px;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { SignButton } from './AuthBtns.styled';\n\nconst SignBtn = ({ onClick, disabled, children }) => {\n  return (\n    <SignButton onClick={onClick} type=\"submit\" disabled={disabled}>\n      {children}\n    </SignButton>\n  );\n};\n\nexport default SignBtn;\n\nSignButton.propTepes = {\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.node,\n    PropTypes.oneOf(['img', 'png', 'svg']),\n  ]).isRequired,\n};\n","import styled, { css } from 'styled-components';\nimport { Form as FormikForm } from 'formik';\nimport { Field as FormikField } from 'formik';\nimport { ErrorMessage } from 'formik';\nimport { BsCheckCircle, BsExclamationCircle } from 'react-icons/bs';\n\nimport { themes } from 'styles/themes';\n\nexport const Form = styled(FormikForm)`\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n\n  border-radius: ${themes.radius.m};\n  background-color: ${themes.colors.white};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: baseline;\n\n  font-size: 16px;\n  font-weight: 500;\n\n  & pre {\n    font-size: 10px;\n  }\n  // &::first-letter { text-transform: uppercase; }\n`;\n\nconst FieldStyles = css`\n  margin-bottom: 20px;\n  width: 100%;\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n`;\n\nexport const FieldWrap = styled.div`\n  ${FieldStyles}\n  position: relative;\n`;\n\nexport const Field = styled(FormikField)`\n  ${FieldStyles}\n\n  padding: 10px 12px;\n  padding-left: ${({ name }) => name.toLowerCase().includes('pass') && '38px'};\n\n  font-size: 16px;\n  font-family: 'Roboto', sans-serif;\n\n  border: 1px solid ${themes.colors.border};\n  border-radius: ${themes.radius.s};\n  outline: 0.5px solid transparent;\n  transition: border-color 250ms linear, outline-color 250ms linear;\n\n  border-color: ${({ validation }) => {\n    switch (validation) {\n      case 'noValue':\n        return themes.colors.border;\n      case validation:\n        return themes.colors[validation];\n      default:\n        break;\n    }\n  }};\n\n  &:hover,\n  &:focus {\n    border-color: ${({ validation }) => {\n      switch (validation) {\n        case validation:\n          return themes.colors[validation];\n        default:\n          break;\n      }\n    }};\n\n    outline-color: ${({ validation }) => {\n      switch (validation) {\n        case validation:\n          return themes.colors[validation];\n        default:\n          break;\n      }\n    }};\n  }\n`;\n\nexport const Tittle = styled.div`\n  margin-bottom: 25px;\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n\n  & h2 {\n    margin: 0;\n\n    font-family: 'Montserrat', sans-serif;\n    font-size: 24px;\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  font-size: 14px;\n  font-weight: 400;\n\n  color: ${themes.colors.error};\n`;\n\nconst IconStyles = css`\n  position: absolute;\n  top: 50%;\n  right: 12px;\n  transform: translateY(-50%);\n`;\n\nexport const SuccessIcon = styled(BsCheckCircle)`\n  ${IconStyles};\n\n  color: ${themes.colors.success};\n`;\n\nexport const ErrorIcon = styled(BsExclamationCircle)`\n  ${IconStyles};\n\n  color: ${themes.colors.error};\n`;\n","import styled from 'styled-components';\nimport { themes } from 'styles/themes';\n\nexport const Button = styled.button`\n  width: fit-content;\n  position: absolute;\n  top: 50%;\n  left: 10px;\n\n  transform: translateY(-50%);\n\n  border-color: transparent;\n  background-color: transparent;\n  color: ${themes.colors.border};\n  transition: color 250ms;\n\n  &:hover,\n  &:focus {\n    color: ${themes.colors.black};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { BsEye, BsEyeSlash } from 'react-icons/bs';\n\nimport { Button } from './IconBtn.styled';\n\nconst IconBtn = ({ toggle, setToggle }) => {\n  const onClick = () => {\n    if (toggle === 'text') setToggle('password');\n    if (toggle === 'password') setToggle('text');\n  };\n\n  return (\n    <Button type=\"button\" onClick={onClick}>\n      {toggle === 'password' && <BsEye size=\"18px\" />}\n      {toggle === 'text' && <BsEyeSlash size=\"18px\" />}\n    </Button>\n  );\n};\n\nexport default IconBtn;\n\nIconBtn.propTypes = {\n  setToggle: PropTypes.func.isRequired,\n  toggle: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Fragment, useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport SignBtn from './AuthBtns/SignBtn';\nimport IconBtn from './IconBtn/IconBtn';\nimport { resetPassThunk } from 'store/auth/authOperations';\nimport { resetSchema } from 'utils/validation';\nimport { Form, Field, ErrorMsg, Label } from './AuthForms.styled';\nimport { FieldWrap, Tittle, SuccessIcon, ErrorIcon } from './AuthForms.styled';\n\nconst initialValues = { newPass: '', confirmPass: '' };\n\nconst ResetForm = ({ id, pwdToken }) => {\n  const dispatch = useDispatch();\n  const [toggle, setToggle] = useState('password');\n\n  const isValid = ({ values, errors, key }) => {\n    const noValue = !values[key] && 'noValue';\n    const isError = errors[key] ? 'error' : 'success';\n    return noValue || isError;\n  };\n\n  const isDisabled = ({ errors, values }) => {\n    const isError = Object.keys(errors).length;\n    const noValue = Object.keys(values).some(key => !values[key]);\n    return noValue || isError;\n  };\n\n  const onSubmit = (values, actions) => {\n    dispatch(resetPassThunk({ ...values, id, pwdToken }))\n      .unwrap() // .then(pld => console.log(pld))\n      .catch(err => console.log(err));\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={resetSchema}\n      onSubmit={onSubmit}\n    >\n      {({ values, errors }) => (\n        <Form>\n          <Tittle>\n            <h2>Reset password</h2>\n          </Tittle>\n\n          {Object.keys(initialValues).map(key => (\n            <Fragment key={key}>\n              <Label>\n                {key.at(0).toUpperCase() +\n                  key.replace('Pass', ' password:').substring(1)}\n                <pre> </pre>\n                <ErrorMsg name={key} component=\"span\" />\n              </Label>\n\n              <FieldWrap>\n                <Field\n                  type={toggle}\n                  name={key}\n                  validation={isValid({ values, errors, key })}\n                />\n\n                <IconBtn toggle={toggle} setToggle={setToggle} />\n                {values[key] && errors[key] && <ErrorIcon />}\n                {values[key] && !errors[key] && <SuccessIcon />}\n              </FieldWrap>\n            </Fragment>\n          ))}\n\n          <SignBtn disabled={isDisabled({ values, errors })}>Submit</SignBtn>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ResetForm;\n\nResetForm.propTypes = {\n  id: PropTypes.string.isRequired,\n  pwdToken: PropTypes.string.isRequired,\n};\n","import { useSearchParams } from 'react-router-dom';\n\nimport Container from 'components/shared/Container/Container';\nimport ResetForm from 'components/AuthForms/ResetForm';\n\nconst ResetPage = () => {\n  const [searchParams] = useSearchParams();\n\n  const id = searchParams.get('id');\n  const pwdToken = searchParams.get('pwd_token');\n\n  return (\n    <Container w=\"400px\" h=\"100vh\" p=\"0\" d=\"flex\" fd=\"column\" jc=\"center\">\n      <ResetForm id={id} pwdToken={pwdToken} />\n    </Container>\n  );\n};\n\nexport default ResetPage;\n","const NAME = {\n  name: 'NAME',\n  msg: 'only letters, numbers, underscores, dashes, spases',\n  pattern: /^[a-zA-Zа-яА-Я0-9]+(([_ -][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nconst EMAIL = {\n  name: 'EMAIL',\n  msg: 'test@test.com, test@test.ua',\n  pattern: /^\\w+([\\\\.-]?\\w+)*@\\w+([\\\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n};\n\nconst PHONE = {\n  name: 'PHONE',\n  msg: 'only digits, spaces, dashes, parentheses, can start with +',\n  pattern: /^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$/,\n};\n\nconst TELEGRAM = {\n  name: 'TELEGRAM',\n  msg: 'only letters and numbers,  more than five, start with @',\n  pattern: /.*\\B@(?=\\w{5,32}\\b)[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*$/,\n};\n\nconst TELEGRAM_PHONE = {\n  name: 'TELEGRAM_PHONE',\n  msg: 'only letters, digits, spaces, dashes, parentheses, can start with +, @',\n  pattern:\n    /(.*\\B@(?=\\w{5,32}\\b)[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*$)|(^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$)/,\n};\n\nconst HTTP_LINK = {\n  name: 'HTTP_LINK',\n  msg: 'http(s)://...',\n  pattern:\n    /^(http(s?):\\/\\/)?(www\\.)+\\/(([_-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nconst LINKEDIN = {\n  name: 'LINKEDIN',\n  msg: 'http(s)://linkedin.com',\n  pattern:\n    /^(http(s)?:\\/\\/)?([\\w]+\\.)?linkedin\\.com\\/(pub|in|profile)+\\/(([_-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nconst GITHUB = {\n  name: 'GITHUB',\n  msg: 'http(s)://...github',\n  pattern:\n    /^(http(s?):\\/\\/)?(www\\.)?github\\.com+\\/(([_-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nconst DATE = {\n  name: 'DATE',\n  msg: 'dd-mm-yyyy',\n  pattern:\n    /^([0-2^([0-2][0-9]|(3)[0-1])(-)(((0)[0-9])|((1)[0-2]))(-)((19|20)\\d{2}$)/,\n};\n\nconst ADDRESS = {\n  name: 'ADDRESS',\n  msg: 'only letters, numbers, commas, dashes, spases',\n  pattern:\n    /^[a-zA-Zа-яА-Я0-9]+(([ -]|(, )[a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nexport {\n  NAME,\n  EMAIL,\n  PHONE,\n  TELEGRAM,\n  TELEGRAM_PHONE,\n  HTTP_LINK,\n  LINKEDIN,\n  GITHUB,\n  DATE,\n  ADDRESS,\n};\n","export const CONTACT_CREDENTIALS = [\n  'phone',\n  'email',\n  'whatsapp',\n  'viber',\n  'telegram',\n  'linkedin',\n  'github',\n  'address',\n  'birthday',\n  'notes',\n];\n\nexport const CONTACT_FIELDS = ['firstName', 'lastName', ...CONTACT_CREDENTIALS];\n\nexport const USER_CREDENTIALS = [\n  'name',\n  'email',\n  'whatsApp',\n  'telegram',\n  'location',\n  'socialLink',\n  'birthday',\n  'about',\n];\n","import * as Yup from 'yup';\n\nimport { regExp } from 'utils/constants';\n\nconst pattern = regExp => [regExp.pattern, regExp.msg];\n\nconst name = Yup.string()\n  .min(4, 'is too short')\n  .required('is required')\n  .matches(...pattern(regExp.NAME));\nconst email = Yup.string()\n  .required('is required')\n  .matches(...pattern(regExp.EMAIL));\nconst password = Yup.string().min(6, 'is too short').required('is required');\nconst code = Yup.number().required('is required').typeError('must be a number');\n\nexport const signupSchema = Yup.object().shape({ name, email, password });\nexport const signinSchema = Yup.object().shape({ email, password });\nexport const verifySchema = Yup.object().shape({ verificationCode: code });\nexport const forgotSchema = Yup.object().shape({ email });\nexport const resetSchema = Yup.object().shape({\n  newPass: password,\n  confirmPass: password.oneOf([Yup.ref('newPass')], 'must match'),\n});\n","import * as Yup from 'yup';\n\nimport { regExp } from 'utils/constants';\n\nconst pattern = regExp => [regExp.pattern, regExp.msg];\n\nexport const contactSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .required('Required')\n    .matches(...pattern(regExp.NAME)),\n  lastName: Yup.string().matches(...pattern(regExp.NAME)),\n  phone: Yup.string()\n    .required('Required')\n    .matches(...pattern(regExp.PHONE)),\n  email: Yup.string().matches(...pattern(regExp.EMAIL)),\n  whatsapp: Yup.string().matches(...pattern(regExp.PHONE)),\n  viber: Yup.string().matches(...pattern(regExp.PHONE)),\n  telegram: Yup.string().matches(...pattern(regExp.TELEGRAM)),\n  linkedin: Yup.string().matches(...pattern(regExp.LINKEDIN)),\n  github: Yup.string().matches(...pattern(regExp.GITHUB)),\n  address: Yup.string().matches(...pattern(regExp.ADDRESS)),\n  birthday: Yup.string().matches(...pattern(regExp.DATE)),\n  notes: Yup.string(),\n});\n"],"names":["CommonStyles","css","themes","SignButton","styled","IconLink","onClick","disabled","children","type","PropTypes","isRequired","Form","FormikForm","Label","FieldStyles","FieldWrap","Field","FormikField","name","toLowerCase","includes","validation","Tittle","ErrorMsg","ErrorMessage","IconStyles","SuccessIcon","BsCheckCircle","ErrorIcon","BsExclamationCircle","Button","toggle","setToggle","size","initialValues","newPass","confirmPass","id","pwdToken","dispatch","useDispatch","useState","isValid","values","errors","key","noValue","isError","isDisabled","Object","keys","length","some","validationSchema","resetSchema","onSubmit","actions","resetPassThunk","unwrap","catch","err","console","log","resetForm","map","Fragment","at","toUpperCase","replace","substring","component","IconBtn","SignBtn","useSearchParams","searchParams","get","Container","w","h","p","d","fd","jc","NAME","msg","pattern","EMAIL","PHONE","TELEGRAM","LINKEDIN","GITHUB","DATE","ADDRESS","CONTACT_CREDENTIALS","CONTACT_FIELDS","USER_CREDENTIALS","regExp","Yup","min","required","matches","email","password","code","typeError","signupSchema","shape","signinSchema","verifySchema","verificationCode","forgotSchema","oneOf","contactSchema","firstName","lastName","phone","whatsapp","viber","telegram","linkedin","github","address","birthday","notes"],"sourceRoot":""}