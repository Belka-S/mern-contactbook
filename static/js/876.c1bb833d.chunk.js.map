{"version":3,"file":"static/js/876.c1bb833d.chunk.js","mappings":"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","sources":["components/AuthForms/AuthLinks/LinkBtn.jsx","components/AuthForms/SigninForm.jsx","components/AuthForms/ForgotForm.jsx","pages/SigninPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { Btn } from './Link.styled';\n\nconst LinkBtn = ({ onClick, fs, children }) => {\n  return (\n    <Btn type=\"button\" onClick={onClick} fs={fs}>\n      {children}\n    </Btn>\n  );\n};\n\nexport default LinkBtn;\n\nBtn.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  fs: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { Fragment, useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport LinkRoute from 'components/AuthForms/AuthLinks/LinkRoute';\nimport LinkBtn from './AuthLinks/LinkBtn';\nimport SignBtn from './AuthBtns/SignBtn';\nimport IconBtn from './IconBtn/IconBtn';\nimport GoogleBtn from './AuthBtns/GoogleBtn';\nimport { loginThunk } from 'store/auth/authOperations';\nimport { signinSchema } from 'utils/validation';\nimport { Form, Field, ErrorMsg, Label } from './AuthForms.styled';\nimport { FieldWrap, Tittle, SuccessIcon, ErrorIcon } from './AuthForms.styled';\n\nconst initialValues = { email: '', password: '' };\n\nconst SigninForm = ({ setIsVerify, setIsForgot, setEmail }) => {\n  const dispatch = useDispatch();\n  const [toggle, setToggle] = useState('password');\n\n  const isValid = ({ values, errors, key }) => {\n    const noValue = !values[key] && 'noValue';\n    const isError = errors[key] ? 'error' : 'success';\n    return noValue || isError;\n  };\n\n  const isDisabled = ({ errors, values }) => {\n    const isError = Object.keys(errors).length;\n    const noValue = Object.keys(values).some(key => !values[key]);\n    return noValue || isError;\n  };\n\n  const onClick = ({ email }) => {\n    setEmail(email);\n    setIsForgot(true);\n  };\n\n  const onSubmit = (values, actions) => {\n    dispatch(loginThunk(values))\n      .unwrap()\n      .then(pld => setIsVerify(!pld.result.user.verifiedEmail))\n      .catch(err => err.includes('401') && toast.error('Unauthorized'));\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={signinSchema}\n      onSubmit={onSubmit}\n    >\n      {({ values, errors }) => (\n        <Form>\n          <Tittle>\n            <h2>Sign in</h2>\n            <LinkRoute to=\"/signup\">Don't have an account?</LinkRoute>\n          </Tittle>\n\n          {Object.keys(initialValues).map(key => (\n            <Fragment key={key}>\n              <Label>\n                {key.at(0).toUpperCase() + key.substring(1) + ':'}\n                <pre> </pre>\n                <ErrorMsg name={key} component=\"span\" />\n                {key === 'password' && (\n                  <LinkBtn onClick={() => onClick(values)}>\n                    Forgot your pass?\n                  </LinkBtn>\n                )}\n              </Label>\n\n              <FieldWrap>\n                <Field\n                  type={key === 'password' ? toggle : key}\n                  name={key}\n                  validation={isValid({ values, errors, key })}\n                />\n\n                {key === 'password' && (\n                  <IconBtn toggle={toggle} setToggle={setToggle} />\n                )}\n                {values[key] && errors[key] && <ErrorIcon />}\n                {values[key] && !errors[key] && <SuccessIcon />}\n              </FieldWrap>\n            </Fragment>\n          ))}\n\n          <SignBtn disabled={isDisabled({ values, errors })}>Sign in</SignBtn>\n\n          <GoogleBtn />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default SigninForm;\n\nSigninForm.propTypes = {\n  setIsVerify: PropTypes.func.isRequired,\n  setIsForgot: PropTypes.func.isRequired,\n  setEmail: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Fragment } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport SignBtn from './AuthBtns/SignBtn';\nimport { forgotPassThunk } from 'store/auth/authOperations';\nimport { forgotSchema } from 'utils/validation';\nimport { Form, Field, ErrorMsg, Label } from './AuthForms.styled';\nimport { FieldWrap, Tittle, SuccessIcon, ErrorIcon } from './AuthForms.styled';\n\nconst ForgotForm = ({ setIsForgot, email }) => {\n  const dispatch = useDispatch();\n\n  const isValid = ({ values, errors }) => {\n    const noValue = !Object.values(values)[0] && 'noValue';\n    const isError = Object.values(errors).length ? 'error' : 'success';\n    return noValue || isError;\n  };\n\n  const isDisabled = ({ errors }) => Object.keys(errors).length;\n\n  const onSubmit = (values, actions) => {\n    dispatch(forgotPassThunk(values))\n      .unwrap() // .then(pld => console.log(pld))\n      .catch(err => console.log(err));\n\n    setIsForgot(false); // actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ email }}\n      validationSchema={forgotSchema}\n      onSubmit={onSubmit}\n    >\n      {({ values, errors }) => (\n        <Form>\n          <Tittle>\n            <h2>Get reset link</h2>\n          </Tittle>\n\n          <Fragment>\n            <Label>\n              Email:\n              <pre> </pre>\n              <ErrorMsg name=\"email\" component=\"span\" />\n            </Label>\n\n            <FieldWrap>\n              <Field\n                type=\"email\"\n                name=\"email\"\n                validation={isValid({ values, errors })}\n              />\n\n              {isValid({ values, errors }) === 'error' && <ErrorIcon />}\n              {isValid({ values, errors }) === 'success' && <SuccessIcon />}\n            </FieldWrap>\n          </Fragment>\n\n          <SignBtn disabled={isDisabled({ errors })}>Submit</SignBtn>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ForgotForm;\n\nForgotForm.propTypes = {\n  setIsForgot: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n};\n","import { useState } from 'react';\n\nimport Container from 'components/shared/Container/Container';\nimport SigninForm from 'components/AuthForms/SigninForm';\nimport ForgotForm from 'components/AuthForms/ForgotForm';\nimport Modal from 'components/shared/Modal/Modal';\nimport VerifyForm from 'components/AuthForms/VerifyForm';\nimport { useAuth } from 'utils/hooks';\n\nconst SigninPage = () => {\n  const [isVerify, setIsVerify] = useState(false);\n  const [isForgot, setIsForgot] = useState(false);\n  const [email, setEmail] = useState('');\n  const { user } = useAuth();\n\n  return (\n    <Container w=\"400px\" h=\"100vh\" p=\"0\" d=\"flex\" fd=\"column\" jc=\"center\">\n      <SigninForm\n        setIsVerify={setIsVerify}\n        setIsForgot={setIsForgot}\n        setEmail={setEmail}\n      />\n\n      {isVerify && (\n        <Modal onClick={() => setIsVerify(!isVerify)}>\n          <VerifyForm userEmail={user.email} />\n        </Modal>\n      )}\n\n      {isForgot && (\n        <Modal onClick={() => setIsForgot(!isForgot)}>\n          <ForgotForm setIsForgot={setIsForgot} email={email} />\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default SigninPage;\n"],"names":["onClick","fs","children","type","Btn","PropTypes","isRequired","initialValues","email","password","setIsVerify","setIsForgot","setEmail","dispatch","useDispatch","useState","toggle","setToggle","isValid","values","errors","key","noValue","isError","isDisabled","Object","keys","length","some","validationSchema","signinSchema","onSubmit","actions","loginThunk","unwrap","then","pld","result","user","verifiedEmail","catch","err","includes","toast","resetForm","LinkRoute","to","map","Fragment","at","toUpperCase","substring","name","component","validation","IconBtn","SignBtn","disabled","GoogleBtn","forgotSchema","forgotPassThunk","console","log","isVerify","isForgot","useAuth","Container","w","h","p","d","fd","jc","Modal","VerifyForm","userEmail"],"sourceRoot":""}